packages_update: true
packages_upgrade: true
packages:
    - apache2
    - mariadb-client-10.3
    - php7.4
    - php7.4-mysql
    - php7.4-curl
    - php7.4-xml
    - php-imagick

write_files:

    - path: /var/cache/ws_init.sh
      owner: root:root
      permissions: '0755'
      defer: true
      content: |
              #!/bin/sh
              set -x
              cd /var/cache
              wget https://wordpress.org/wordpress-6.0.2.tar.gz
              tar -xzf wordpress-6.0.2.tar.gz
              sleep 10
              cp -R wordpress /var/www/html/wordpress
              chown -R www-data:www-data /var/www/html/wordpress/
              usermod -a -G www-data ${var_ws_usr}
              mkdir /var/www/html/wordpress/wp-content/uploads
              chown -R www-data:www-data /var/www/html/wordpress/wp-content/uploads/
              
              # wordpress config 
              cp wp-config.php /var/www/html/wordpress/wp-config.php

              #wordpress cli + plugin install
              curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
              chmod +x wp-cli.phar
              mv wp-cli.phar /usr/local/bin/wp
              
              chmod -R 775 /var/www/html/wordpress/
              su ${var_ws_usr} -c " wp core install --path=/var/www/html/wordpress/ --url=${var_ws_url} --title=${var_ws_title} --admin_user=${var_ws_admin_user} --admin_email=${var_ws_admin_email} --admin_password=${var_admin_pass} "
              #su ${var_ws_usr} -c " wp db create --path=/var/www/html/wordpress/"
              su ${var_ws_usr} -c " wp plugin install  amazon-s3-and-cloudfront --activate --path=/var/www/html/wordpress/ "
              su ${var_ws_usr} -c " wp plugin install  imagemagick-engine       --activate --path=/var/www/html/wordpress/ "
              #su ${var_ws_usr} -c " wp plugin activate  amazon-s3-and-cloudfront-tweaks --path=/var/www/html/wordpress/  "
              chmod -R 755 /var/www/html/wordpress/
              # restart apache2
              service apache2 restart
                  
    
    - path: /var/cache/wp-config.php
      owner: root:root
      permissions: '0755'
      defer: true
      content: |
        <?php
        /**
         * The base configuration for WordPress
         *
         * The wp-config.php creation script uses this file during the installation.
         * You don't have to use the web site, you can copy this file to "wp-config.php"
         * and fill in the values.
         *
         * This file contains the following configurations:
         *
         * * Database settings
         * * Secret keys
         * * Database table prefix
         * * ABSPATH
         *
         * @link https://wordpress.org/support/article/editing-wp-config-php/
         *
         * @package WordPress
         */
        
        // ** Database settings - You can get this info from your web host ** //
        /** The name of the database for WordPress */
        
        define( 'DB_NAME', '${var_db_name}' );
        
        /** Database username */
        define( 'DB_USER', '${var_db_user}' );
        
        /** Database password */
        define( 'DB_PASSWORD', '${var_db_pass}' );
        
        /** Database hostname */
        define( 'DB_HOST', '${var_db_host}:${var_db_port}' );
        
        /** Database charset to use in creating database tables. */
        define( 'DB_CHARSET', 'utf8' );
        
        /** The database collate type. Don't change this if in doubt. */
        define( 'DB_COLLATE', '' );
        
        /**#@+
         * Authentication unique keys and salts.
         *
         * Change these to different unique phrases! You can generate these using
         * the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}.
         *
         * You can change these at any point in time to invalidate all existing cookies.
         * This will force all users to have to log in again.
         *
         * @since 2.6.0
         */
        
        define( 'AUTH_KEY',         '${AUTH_KEY}'        );
        define( 'SECURE_AUTH_KEY',  '${SECURE_AUTH_KEY}' );
        define( 'LOGGED_IN_KEY',    '${LOGGED_IN_KEY}'   );
        define( 'NONCE_KEY',        '${NONCE_KEY}'       );
        define( 'AUTH_SALT',        '${AUTH_SALT}'       );
        define( 'SECURE_AUTH_SALT', '${SECURE_AUTH_SALT}');
        define( 'LOGGED_IN_SALT',   '${LOGGED_IN_SALT}'  );
        define( 'NONCE_SALT',       '${NONCE_SALT}'      );
        
        /**#@-*/
        
        //////////////////////////////////////////////////////////////////////////////////////////////
        // Enable WP_DEBUG mode
        define( 'WP_DEBUG', true );

        // Enable Debug logging to the /wp-content/debug.log file
        define( 'WP_DEBUG_LOG', '/tmp/wp-errors.log' );

        // Disable display of errors and warnings 
        define( 'WP_DEBUG_DISPLAY', false );
        @ini_set( 'display_errors', 0 );

        // Use dev versions of core JS and CSS files (only needed if you are modifying these core files)
        define( 'SCRIPT_DEBUG', true );
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        /**
         * WordPress database table prefix.
         *
         * You can have multiple installations in one database if you give each
         * a unique prefix. Only numbers, letters, and underscores please!
         */
        $table_prefix = 'wp_';
        
        /**
         * For developers: WordPress debugging mode.
         *
         * Change this to true to enable the display of notices during development.
         * It is strongly recommended that plugin and theme developers use WP_DEBUG
         * in their development environments.
         *
         * For information on other constants that can be used for debugging,
         * visit the documentation.
         *
         * @link https://wordpress.org/support/article/debugging-in-wordpress/
         */
        define( 'WP_DEBUG', false );
        
        /* Add any custom values between this line and the "stop editing" line. */
        
        //TODO
        define( 'AS3CF_SETTINGS', serialize( array(
            // Storage Provider ('aws', 'do', 'gcp')
            'provider' => 'aws',
            // Access Key ID for Storage Provider (aws and do only, replace '*')
            //'access-key-id' => '************'
            // Secret Access Key for Storage Providers (aws and do only, replace '*')
            //'secret-access-key' => '****************',
            // GCP Key File Path (gcp only, absolute file path, not URL)
            // Make sure hidden from public website, i.e. outside site's document root.
            //'key-file-path' => '/path/to/key/file.json',
            // Use IAM Roles on Amazon Elastic Compute Cloud (EC2) or Google Compute Engine (GCE)
            'use-server-roles' => true,
            // Bucket to upload files to
            'bucket' => '${var_s3_bucket_name}',
            // Bucket region (e.g. 'us-west-1' - leave blank for default region)
            'region' => '${var_s3_bucket_region}',
            // Automatically copy files to bucket on upload
            'copy-to-s3' => true,
            // Enable object prefix, useful if you use your bucket for other files
            'enable-object-prefix' => true,
            // Object prefix to use if 'enable-object-prefix' is 'true'
            'object-prefix' => 'wp-content/uploads/',
            // Organize bucket files into YYYY/MM directories matching Media Library upload date
            'use-yearmonth-folders' => true,
            // Append a timestamped folder to path of files offloaded to bucket to avoid filename clashes and bust CDN cache if updated
            'object-versioning' => true,
            // Delivery Provider ('storage', 'aws', 'do', 'gcp', 'cloudflare', 'keycdn', 'stackpath', 'other')
            'delivery-provider' => 'aws',
            // Custom name to display when using 'other' Delivery Provider
            'delivery-provider-name' => 'Akamai',
            // Rewrite file URLs to bucket
            'serve-from-s3' => true,
            // Use a custom domain (CNAME), not supported when using 'storage' Delivery Provider
            'enable-delivery-domain' => false,
            // Custom domain (CNAME), not supported when using 'storage' Delivery Provider
            'delivery-domain' => 'cdn.example.com',
            // Enable signed URLs for Delivery Provider that uses separate key pair (currently only 'aws' supported, a.k.a. CloudFront)
            'enable-signed-urls' => false,
            // Access Key ID for signed URLs (aws only, replace '*')
            'signed-urls-key-id' => '********************',
            // Key File Path for signed URLs (aws only, absolute file path, not URL)
            // Make sure hidden from public website, i.e. outside site's document root.
            'signed-urls-key-file-path' => '/path/to/key/file.pem',
            // Private Prefix for signed URLs (aws only, relative directory, no wildcards)
            'signed-urls-object-prefix' => 'private/',
            // Serve files over HTTPS
            'force-https' => false,
            // Remove the local file version once offloaded to bucket
            'remove-local-file' => true,
            // DEPRECATED (use enable-delivery-domain): Bucket URL format to use ('path', 'cloudfront')
            //'domain' => 'path',
            // DEPRECATED (use delivery-domain): Custom domain if 'domain' set to 'cloudfront'
            //'cloudfront' => 'cdn.exmple.com',
        ) ) );
        
        /* That's all, stop editing! Happy publishing. */
        
        /** Absolute path to the WordPress directory. */
        if ( ! defined( 'ABSPATH' ) ) {
        	define( 'ABSPATH', __DIR__ . '/' );
        }
        
        /** Sets up WordPress vars and included files. */
        require_once ABSPATH . 'wp-settings.php';
    



runcmd:
  - ["/var/cache/ws_init.sh"]
